# API Routes


## Summary
1. API routes provide a solution to build your API with Next.js.
2. Any file inside the folder `pages/api` is mapped to `/api/*` and will be treated as an API endpoint instead of a page. 
3. They are server-side only bundles and won't increase your client-side bundle size.
4. For example, the following API route `pages/api/user.js` returns a json response with a status code of 200:
    ```js
    export default function handler(req, res) {
        res.status(200).json({ name: 'John Doe' });
    }
    ```
    访问路径是 `/api/use`
5. For an API route to work, you need to export a function as default (a.k.a request handler), which then receives the following parameters:
    * req: An instance of http.IncomingMessage, plus some pre-built middlewares
    * res: An instance of http.ServerResponse, plus some helper functions


## Dynamic API Routes
1. API routes support dynamic routes, and follow the same file naming rules used for pages.
2. For example, the API route `pages/api/post/[pid].js` has the following code:
    ```js
    export default function handler(req, res) {
        const { pid } = req.query;
        res.end(`Post: ${pid}`);
    }
    ```
    Now, a request to `/api/post/abc` will respond with the text: `Post: abc`.

### Index routes and Dynamic API routes
1. A very common RESTful pattern is to set up routes like this:
    * `GET api/posts` - gets a list of posts, probably paginated  
    * `GET api/posts/12345` - gets post id 12345
2. We can model this in two ways:
    * Option 1:
        * `/api/posts.js`
        * `/api/posts/[postId].js`
    * Option 2:
        * `/api/posts/index.js`
        * `/api/posts/[postId].js`
3. Both are equivalent. A third option of only using `/api/posts/[postId].js` is not valid because Dynamic Routes (including Catch-all routes) do not have an `undefined` state and `GET api/posts` will not match `/api/posts/[postId].js` under any circumstances.

### Catch all API routes
1. API Routes can be extended to catch all paths by adding three dots (`...`) inside the brackets. 
2. For example: `pages/api/post/[...slug].js` matches `/api/post/a`, but also `/api/post/a/b`, `/api/post/a/b/c` and so on.
3. Matched parameters will be sent as a query parameter (`slug` in the example) to the page, and it will always be an array, so, the path `/api/post/a` will have the following query object: `{ "slug": ["a"] }`. And in the case of `/api/post/a/b`, and any other matching path, new parameters will be added to the array, like so: `{ "slug": ["a", "b"] }`.
4. An API route for `pages/api/post/[...slug].js` could look like this:
    ```js
    export default function handler(req, res) {
        const { slug } = req.query;
        res.end(`Post: ${slug.join(', ')}`);
    }
    ```
    Now, a request to `/api/post/a/b/c` will respond with the text: `Post: a, b, c`.

### Optional catch all API routes
1. Catch all routes can be made optional by including the parameter in double brackets (`[[...slug]]`).
2. For example, `pages/api/post/[[...slug]].js` will match `/api/post`, `/api/post/a`,` /api/post/a/b`, and so on.
3. The main difference between catch all and optional catch all routes is that with optional, the route without the parameter is also matched (`/api/post` in the example above).
4. The query objects are as follows:
    ```
    { } // GET `/api/post` (empty object)
    { "slug": ["a"] } // `GET /api/post/a` (single-element array)
    { "slug": ["a", "b"] } // `GET /api/post/a/b` (multi-element array)
    ```

### 定义多种形式时的优先级
1. Predefined API routes take precedence over dynamic API routes, and dynamic API routes over catch all API routes. 
2. Take a look at the following examples:
    * `pages/api/post/create.js` - Will match `/api/post/create`
    * `pages/api/post/[pid].js` - Will match `/api/post/1`, `/api/post/abc`, etc. But not `/api/post/create`
    * `pages/api/post/[...slug].js` - Will match `/api/post/1/2`, `/api/post/a/b/c`, etc. But not `/api/post/create`, `/api/post/abc`


## Edge API Routes
TODO


## References
* [API Routes](https://nextjs.org/docs/pages/building-your-application/routing/api-routes)